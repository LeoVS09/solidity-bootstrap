/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type StorageSet = ContractEventLog<{
  _message: string;
  0: string;
}>;

export interface SimpleStorage extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): SimpleStorage;
  clone(): SimpleStorage;
  methods: {
    storedData(): NonPayableTransactionObject<string>;

    set(x: number | string | BN): NonPayableTransactionObject<void>;

    get(): NonPayableTransactionObject<string>;
  };
  events: {
    StorageSet(cb?: Callback<StorageSet>): EventEmitter;
    StorageSet(options?: EventOptions, cb?: Callback<StorageSet>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "StorageSet", cb: Callback<StorageSet>): void;
  once(
    event: "StorageSet",
    options: EventOptions,
    cb: Callback<StorageSet>
  ): void;
}
