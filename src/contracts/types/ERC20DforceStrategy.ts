/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Borrowed = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type DuringWithdraw = ContractEventLog<{
  amount: string;
  availableAssets: string;
  0: string;
  1: string;
}>;
export type Initialized = ContractEventLog<{
  version: string;
  0: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type PutInStake = ContractEventLog<{
  amount: string;
  balanceBeforeMint: string;
  balanceAfterMint: string;
  balanceOfUnderlying: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type Redeemed_uint256 = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Redeemed_uint256_uint256_uint256_uint256 = ContractEventLog<{
  amount: string;
  balanceBeforeRedeem: string;
  withdrawn: string;
  lost: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;
export type ReturnToLender = ContractEventLog<{
  amount: string;
  0: string;
}>;

export interface ERC20DforceStrategy extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): ERC20DforceStrategy;
  clone(): ERC20DforceStrategy;
  methods: {
    __BaseStrategy__init(
      _name: string,
      wantAddress: string,
      lenderAddress: string
    ): NonPayableTransactionObject<void>;

    _lender(): NonPayableTransactionObject<string>;

    assets(): NonPayableTransactionObject<string>;

    balanceOfAssetsInStake(): NonPayableTransactionObject<{
      0: string;
      1: string;
      2: string;
    }>;

    directBalanceOfAssetsInStake(): NonPayableTransactionObject<string>;

    initialize(
      _name: string,
      wantTokenAddress: string,
      lenderAddress: string,
      stakingAddress: string
    ): NonPayableTransactionObject<void>;

    lender(): NonPayableTransactionObject<string>;

    name(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    setLender(lender: string): NonPayableTransactionObject<void>;

    supplyRatePerBlock(): NonPayableTransactionObject<string>;

    totalAssets(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    want(): NonPayableTransactionObject<string>;

    withdraw(amount: number | string | BN): NonPayableTransactionObject<string>;

    work(): NonPayableTransactionObject<void>;
  };
  events: {
    Borrowed(cb?: Callback<Borrowed>): EventEmitter;
    Borrowed(options?: EventOptions, cb?: Callback<Borrowed>): EventEmitter;

    DuringWithdraw(cb?: Callback<DuringWithdraw>): EventEmitter;
    DuringWithdraw(
      options?: EventOptions,
      cb?: Callback<DuringWithdraw>
    ): EventEmitter;

    Initialized(cb?: Callback<Initialized>): EventEmitter;
    Initialized(
      options?: EventOptions,
      cb?: Callback<Initialized>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    PutInStake(cb?: Callback<PutInStake>): EventEmitter;
    PutInStake(options?: EventOptions, cb?: Callback<PutInStake>): EventEmitter;

    "Redeemed(uint256)"(cb?: Callback<Redeemed_uint256>): EventEmitter;
    "Redeemed(uint256)"(
      options?: EventOptions,
      cb?: Callback<Redeemed_uint256>
    ): EventEmitter;

    "Redeemed(uint256,uint256,uint256,uint256)"(
      cb?: Callback<Redeemed_uint256_uint256_uint256_uint256>
    ): EventEmitter;
    "Redeemed(uint256,uint256,uint256,uint256)"(
      options?: EventOptions,
      cb?: Callback<Redeemed_uint256_uint256_uint256_uint256>
    ): EventEmitter;

    ReturnToLender(cb?: Callback<ReturnToLender>): EventEmitter;
    ReturnToLender(
      options?: EventOptions,
      cb?: Callback<ReturnToLender>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Borrowed", cb: Callback<Borrowed>): void;
  once(event: "Borrowed", options: EventOptions, cb: Callback<Borrowed>): void;

  once(event: "DuringWithdraw", cb: Callback<DuringWithdraw>): void;
  once(
    event: "DuringWithdraw",
    options: EventOptions,
    cb: Callback<DuringWithdraw>
  ): void;

  once(event: "Initialized", cb: Callback<Initialized>): void;
  once(
    event: "Initialized",
    options: EventOptions,
    cb: Callback<Initialized>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "PutInStake", cb: Callback<PutInStake>): void;
  once(
    event: "PutInStake",
    options: EventOptions,
    cb: Callback<PutInStake>
  ): void;

  once(event: "ReturnToLender", cb: Callback<ReturnToLender>): void;
  once(
    event: "ReturnToLender",
    options: EventOptions,
    cb: Callback<ReturnToLender>
  ): void;
}
