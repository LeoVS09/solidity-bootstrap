/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import type BN from "bn.js";
import type { ContractOptions } from "web3-eth-contract";
import type { EventLog } from "web3-core";
import type { EventEmitter } from "events";
import type {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Issue = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Redeem = ContractEventLog<{
  amount: string;
  0: string;
}>;
export type Deprecate = ContractEventLog<{
  newAddress: string;
  0: string;
}>;
export type Params = ContractEventLog<{
  feeBasisPoints: string;
  maxFee: string;
  0: string;
  1: string;
}>;
export type DestroyedBlackFunds = ContractEventLog<{
  _blackListedUser: string;
  _balance: string;
  0: string;
  1: string;
}>;
export type AddedBlackList = ContractEventLog<{
  _user: string;
  0: string;
}>;
export type RemovedBlackList = ContractEventLog<{
  _user: string;
  0: string;
}>;
export type Approval = ContractEventLog<{
  owner: string;
  spender: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Transfer = ContractEventLog<{
  from: string;
  to: string;
  value: string;
  0: string;
  1: string;
  2: string;
}>;
export type Pause = ContractEventLog<{}>;
export type Unpause = ContractEventLog<{}>;

export interface USDT extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): USDT;
  clone(): USDT;
  methods: {
    name(): NonPayableTransactionObject<string>;

    deprecate(_upgradedAddress: string): NonPayableTransactionObject<void>;

    approve(
      _spender: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    deprecated(): NonPayableTransactionObject<boolean>;

    addBlackList(_evilUser: string): NonPayableTransactionObject<void>;

    totalSupply(): NonPayableTransactionObject<string>;

    transferFrom(
      _from: string,
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    upgradedAddress(): NonPayableTransactionObject<string>;

    balances(arg0: string): NonPayableTransactionObject<string>;

    decimals(): NonPayableTransactionObject<string>;

    maximumFee(): NonPayableTransactionObject<string>;

    _totalSupply(): NonPayableTransactionObject<string>;

    unpause(): NonPayableTransactionObject<void>;

    getBlackListStatus(_maker: string): NonPayableTransactionObject<boolean>;

    allowed(arg0: string, arg1: string): NonPayableTransactionObject<string>;

    paused(): NonPayableTransactionObject<boolean>;

    balanceOf(who: string): NonPayableTransactionObject<string>;

    pause(): NonPayableTransactionObject<void>;

    getOwner(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    symbol(): NonPayableTransactionObject<string>;

    transfer(
      _to: string,
      _value: number | string | BN
    ): NonPayableTransactionObject<void>;

    setParams(
      newBasisPoints: number | string | BN,
      newMaxFee: number | string | BN
    ): NonPayableTransactionObject<void>;

    issue(amount: number | string | BN): NonPayableTransactionObject<void>;

    redeem(amount: number | string | BN): NonPayableTransactionObject<void>;

    allowance(
      _owner: string,
      _spender: string
    ): NonPayableTransactionObject<string>;

    basisPointsRate(): NonPayableTransactionObject<string>;

    isBlackListed(arg0: string): NonPayableTransactionObject<boolean>;

    removeBlackList(_clearedUser: string): NonPayableTransactionObject<void>;

    MAX_UINT(): NonPayableTransactionObject<string>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    destroyBlackFunds(
      _blackListedUser: string
    ): NonPayableTransactionObject<void>;
  };
  events: {
    Issue(cb?: Callback<Issue>): EventEmitter;
    Issue(options?: EventOptions, cb?: Callback<Issue>): EventEmitter;

    Redeem(cb?: Callback<Redeem>): EventEmitter;
    Redeem(options?: EventOptions, cb?: Callback<Redeem>): EventEmitter;

    Deprecate(cb?: Callback<Deprecate>): EventEmitter;
    Deprecate(options?: EventOptions, cb?: Callback<Deprecate>): EventEmitter;

    Params(cb?: Callback<Params>): EventEmitter;
    Params(options?: EventOptions, cb?: Callback<Params>): EventEmitter;

    DestroyedBlackFunds(cb?: Callback<DestroyedBlackFunds>): EventEmitter;
    DestroyedBlackFunds(
      options?: EventOptions,
      cb?: Callback<DestroyedBlackFunds>
    ): EventEmitter;

    AddedBlackList(cb?: Callback<AddedBlackList>): EventEmitter;
    AddedBlackList(
      options?: EventOptions,
      cb?: Callback<AddedBlackList>
    ): EventEmitter;

    RemovedBlackList(cb?: Callback<RemovedBlackList>): EventEmitter;
    RemovedBlackList(
      options?: EventOptions,
      cb?: Callback<RemovedBlackList>
    ): EventEmitter;

    Approval(cb?: Callback<Approval>): EventEmitter;
    Approval(options?: EventOptions, cb?: Callback<Approval>): EventEmitter;

    Transfer(cb?: Callback<Transfer>): EventEmitter;
    Transfer(options?: EventOptions, cb?: Callback<Transfer>): EventEmitter;

    Pause(cb?: Callback<Pause>): EventEmitter;
    Pause(options?: EventOptions, cb?: Callback<Pause>): EventEmitter;

    Unpause(cb?: Callback<Unpause>): EventEmitter;
    Unpause(options?: EventOptions, cb?: Callback<Unpause>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Issue", cb: Callback<Issue>): void;
  once(event: "Issue", options: EventOptions, cb: Callback<Issue>): void;

  once(event: "Redeem", cb: Callback<Redeem>): void;
  once(event: "Redeem", options: EventOptions, cb: Callback<Redeem>): void;

  once(event: "Deprecate", cb: Callback<Deprecate>): void;
  once(
    event: "Deprecate",
    options: EventOptions,
    cb: Callback<Deprecate>
  ): void;

  once(event: "Params", cb: Callback<Params>): void;
  once(event: "Params", options: EventOptions, cb: Callback<Params>): void;

  once(event: "DestroyedBlackFunds", cb: Callback<DestroyedBlackFunds>): void;
  once(
    event: "DestroyedBlackFunds",
    options: EventOptions,
    cb: Callback<DestroyedBlackFunds>
  ): void;

  once(event: "AddedBlackList", cb: Callback<AddedBlackList>): void;
  once(
    event: "AddedBlackList",
    options: EventOptions,
    cb: Callback<AddedBlackList>
  ): void;

  once(event: "RemovedBlackList", cb: Callback<RemovedBlackList>): void;
  once(
    event: "RemovedBlackList",
    options: EventOptions,
    cb: Callback<RemovedBlackList>
  ): void;

  once(event: "Approval", cb: Callback<Approval>): void;
  once(event: "Approval", options: EventOptions, cb: Callback<Approval>): void;

  once(event: "Transfer", cb: Callback<Transfer>): void;
  once(event: "Transfer", options: EventOptions, cb: Callback<Transfer>): void;

  once(event: "Pause", cb: Callback<Pause>): void;
  once(event: "Pause", options: EventOptions, cb: Callback<Pause>): void;

  once(event: "Unpause", cb: Callback<Unpause>): void;
  once(event: "Unpause", options: EventOptions, cb: Callback<Unpause>): void;
}
