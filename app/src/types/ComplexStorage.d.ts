/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ComplexStorageContract
  extends Truffle.Contract<ComplexStorageInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ComplexStorageInstance>;
}

type AllEvents = never;

export interface ComplexStorageInstance extends Truffle.ContractInstance {
  constuint(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  deviceDataArray(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string }>;

  investmentsDeadlineTimeStamp(
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  investmentsLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  singleDD(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: string; 1: string; 2: string }>;

  storeduint1(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  string1(txDetails?: Truffle.TransactionDetails): Promise<string>;

  string2(txDetails?: Truffle.TransactionDetails): Promise<string>;

  string3(txDetails?: Truffle.TransactionDetails): Promise<string>;

  uintarray(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    constuint(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    deviceDataArray(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string }>;

    investmentsDeadlineTimeStamp(
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    investmentsLimit(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    singleDD(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: string; 1: string; 2: string }>;

    storeduint1(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    string1(txDetails?: Truffle.TransactionDetails): Promise<string>;

    string2(txDetails?: Truffle.TransactionDetails): Promise<string>;

    string3(txDetails?: Truffle.TransactionDetails): Promise<string>;

    uintarray(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
